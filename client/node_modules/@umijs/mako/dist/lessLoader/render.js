var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod,
  )
);

// src/lessLoader/render.ts
var import_fs = __toESM(require('fs'));
var import_less = __toESM(require('less'));
module.exports = async function render(param) {
  const { modifyVars, globalVars, math, sourceMap, plugins } = param.opts;
  const input = import_fs.default.readFileSync(param.filename, 'utf-8');
  const pluginInstances =
    plugins == null
      ? void 0
      : plugins.map((p) => {
          if (Array.isArray(p)) {
            const pluginModule = require(p[0]);
            const PluginClass = pluginModule.default || pluginModule;
            return new PluginClass(p[1]);
          } else {
            return require(p);
          }
        });
  const result = await import_less.default
    .render(input, {
      filename: param.filename,
      javascriptEnabled: true,
      math,
      plugins: pluginInstances,
      modifyVars,
      globalVars,
      sourceMap,
      rewriteUrls: 'all',
    })
    .catch((err) => {
      throw new Error(err.toString());
    });
  return { content: result.css, type: 'css' };
};
